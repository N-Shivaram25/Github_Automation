name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure previous commit is available

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD~1)
          fi
          
          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD)
          echo "Detected changed files: $CHANGED_FILES"
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected. Exiting..."
            exit 1
          fi

          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      - name: Determine File Type
        id: determine-file
        run: |
          if echo "$CHANGED_FILES" | grep -qE '\.c$'; then
            echo "language=C" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE '\.cpp$'; then
            echo "language=C++" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE '\.py$'; then
            echo "language=Python" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE '\.java$'; then
            echo "language=Java" >> $GITHUB_ENV
          else
            echo "No relevant file changes detected. Exiting..."
            exit 1
          fi

      - name: Install C Dependencies
        if: env.language == 'C'
        run: |
          sudo apt update
          sudo apt install -y gcc

      - name: Install C++ Dependencies
        if: env.language == 'C++'
        run: |
          sudo apt update
          sudo apt install -y g++

      - name: Install Java Dependencies
        if: env.language == 'Java'
        run: |
          sudo apt update
          sudo apt install -y openjdk-17-jdk

      - name: Install Python Dependencies
        if: env.language == 'Python'
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pytest

      - name: Run C Tests
        if: env.language == 'C'
        run: |
          gcc solutions/*.c -o solution_c
          while read -r test_input test_expected; do
            echo "Input: $test_input"
            echo "Expected Output: $test_expected"
            actual_output=$(echo "$test_input" | ./solution_c)
            echo "Actual Output: $actual_output"
            if [ "$actual_output" == "$test_expected" ]; then
              echo "Test Case Passed ✅"
            else
              echo "Test Case Failed ❌"
            fi
          done < tests/test.c | tee test_results.log

      - name: Run C++ Tests
        if: env.language == 'C++'
        run: |
          g++ solutions/*.cpp -o solution_cpp
          while read -r test_input test_expected; do
            echo "Input: $test_input"
            echo "Expected Output: $test_expected"
            actual_output=$(echo "$test_input" | ./solution_cpp)
            echo "Actual Output: $actual_output"
            if [ "$actual_output" == "$test_expected" ]; then
              echo "Test Case Passed ✅"
            else
              echo "Test Case Failed ❌"
            fi
          done < tests/test.cpp | tee test_results.log

      - name: Run Java Tests
        if: env.language == 'Java'
        run: |
          javac -d solutions solutions/*.java
          while read -r test_input test_expected; do
            echo "Input: $test_input"
            echo "Expected Output: $test_expected"
            actual_output=$(echo "$test_input" | java -cp solutions Solution)
            echo "Actual Output: $actual_output"
            if [ "$actual_output" == "$test_expected" ]; then
              echo "Test Case Passed ✅"
            else
              echo "Test Case Failed ❌"
            fi
          done < tests/Test.java | tee test_results.log

      - name: Run Python Tests
        if: env.language == 'Python'
        run: |
          while read -r test_input test_expected; do
            echo "Input: $test_input"
            echo "Expected Output: $test_expected"
            actual_output=$(echo "$test_input" | python3 solutions/*.py)
            echo "Actual Output: $actual_output"
            if [ "$actual_output" == "$test_expected" ]; then
              echo "Test Case Passed ✅"
            else
              echo "Test Case Failed ❌"
            fi
          done < tests/test.py | tee test_results.log

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.log
